library IEEE;
use IEEE.std_logic_1164.all;
use ieee.numeric_std.all;

entity keyboard_decoder is
  port(
    CLOCK_50 : in     std_logic;
    PS2_CLK: in std_logic;
    KEY: in std_logic_vector(3 downto 0);
    LEDG: out std_logic_vector(8 downto 0);
    LEDR: out std_logic_vector(17 downto 0);
    PS2_DAT: in std_logic
    );
end keyboard_decoder;

architecture RTL of keyboard_decoder is

    component keyboard_controller
  port(
    clkInKb : in     std_logic;
    reset   : in     std_logic;
    dataKb   : in std_logic;
--    parity_check : in std_logic;
    scanCode   : out    std_logic_vector(7 downto 0);
    outErr: out std_logic;
    valid   : out    std_logic
    );
  end component;

    signal reset : std_logic;
    signal scanCode : std_logic_vector(7 downto 0);
    signal outErr : std_logic;
    signal valid : std_logic;

begin  -- RTL

  reset<= KEY(0);

  reception: keyboard_controller
    port map(
      clkInKb => PS2_CLK,
      reset => reset,
      dataKb => PS2_DAT,
--      parity_check => parity_check,
      scanCode => scanCode,
      outErr => outErr,
      valid => valid
      );

  process (CLOCK_50, reset)
  begin  -- process
    if reset = '0' then                 -- asynchronous reset (active low)
      LEDR<=(others=>'0');
      LEDG<=(others=>'0');
    elsif CLOCK_50'event and CLOCK_50 = '1' then  -- rising clock edge
      LEDR<=(others=>'0');
      LEDG<=(others=>'0');
      if valid='1' then
        LEDG(0)<='1';
      else
        LEDR(0)<='1';
      end if;
    end if;
  end process;

end RTL;
